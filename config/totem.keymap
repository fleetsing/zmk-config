//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <16 27>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_asterisk {
            bindings = <&kp LS(SQT)>;
            key-positions = <7 17>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_slash {
            bindings = <&kp LS(SLASH)>;
            key-positions = <17 28>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_ampersand {
            bindings = <&kp LS(NUMBER_6)>;
            key-positions = <8 18>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_pipe {
            bindings = <&kp LA(NUMBER_6)>;
            key-positions = <18 29>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_backwards {
            bindings = <&kp LA(LC(LG(J)))>;
            key-positions = <16 17>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_forwards {
            bindings = <&kp LA(LC(LG(L)))>;
            key-positions = <17 18>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_left_bracket {
            bindings = <&kp RA(N8)>;
            key-positions = <1 2>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_right_bracket {
            bindings = <&kp RA(N9)>;
            key-positions = <2 3>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_left_brace {
            bindings = <&kp RS(RA(N8))>;
            key-positions = <27 28>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_right_brace {
            bindings = <&kp RS(RA(N9))>;
            key-positions = <28 29>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_equal {
            bindings = <&kp LS(N0)>;
            key-positions = <8 6>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_caret {
            bindings = <&kp LS(RIGHT_BRACKET)>;
            key-positions = <5 15>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_underscore {
            bindings = <&kp LS(MINUS)>;
            key-positions = <15 26>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_at_sign {
            bindings = <&kp RA(NUMBER_2)>;
            key-positions = <1 11>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_percent {
            bindings = <&kp LS(N5)>;
            key-positions = <11 22>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_hash {
            bindings = <&kp LS(NUMBER_3)>;
            key-positions = <2 12>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_backslash {
            bindings = <&kp RS(RA(N7))>;
            key-positions = <12 23>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_dollar_sign {
            bindings = <&kp RA(NUMBER_4)>;
            key-positions = <13 24>;
        };

        combo_euro_sign {
            bindings = <&kp RS(NUMBER_4)>;
            key-positions = <13 3>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_tab_back {
            bindings = <&kp RS(TAB)>;
            key-positions = <11 12>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <6 7>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_greater_than {
            bindings = <&kp RS(LESS_THAN)>;
            key-positions = <7 8>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <11 12 13>;
            require-prior-idle-ms = <100>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <16 17 18>;
            require-prior-idle-ms = <100>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <4 14>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_left_parenthesis {
            bindings = <&kp BACKSPACE>;
            key-positions = <22 23>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_right_parenthesis {
            bindings = <&kp DELETE>;
            key-positions = <23 24>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_pound_sign {
            bindings = <&kp LA(NUMBER_3)>;
            key-positions = <14 25>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_next_space {
            bindings = <&kp LA(LC(LG(O)))>;
            key-positions = <17 18>;
            require-prior-idle-ms = <100>;
            layers = <4 5 2>;
        };

        combo_previous_space {
            bindings = <&kp LA(LC(LG(U)))>;
            key-positions = <16 17>;
            require-prior-idle-ms = <100>;
            layers = <4 5 2>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
               &kp Q             &kp W        &kp F           &kp P               &kp B    &kp J           &kp L                &kp U            &kp Y        &kp BACKSLASH
               &mt LEFT_SHIFT A  &mt LCTRL R  &mt LEFT_ALT S  &mt LEFT_COMMAND T  &kp G    &kp M           &mt RIGHT_COMMAND N  &mt RIGHT_ALT E  &mt RCTRL I  &mt RIGHT_SHIFT O
&kp SEMICOLON  &kp Z             &kp X        &kp C           &kp D               &kp V    &kp K           &kp H                &kp COMMA        &kp DOT      &kp LS(QUESTION)   &kp APOSTROPHE
                                              &mo 2           &lt 5 SPACE         &sl 1    &sk LEFT_SHIFT  &lt 4 BACKSPACE      &mo 3
            >;
        };

        number_layer {
            bindings = <
       &none  &none  &none  &none  &none     &none  &kp N7  &kp N8  &kp N9  &none
       &none  &none  &none  &none  &none     &none  &kp N4  &kp N5  &kp N6  &kp N0
&none  &none  &none  &none  &none  &none     &none  &kp N1  &kp N2  &kp N3  &none   &none
                     &to 0  &none  &trans    &mo 6  &none   &none
            >;

            label = "NUM";
        };

        nav_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "NAVI";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃           ┃           ┃     UP    ┃           ┃     {     ┃   ┃     }     ┃     7     ┃     8     ┃     9     ┃     +     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   SHIFT   ┃   LEFT    ┃    DOWN   ┃   RIGHT   ┃     [     ┃   ┃     ]     ┃     4     ┃     5     ┃     6     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃   P UP    ┃  C LOCK   ┃  P DOWN   ┃     (     ┃   ┃     )     ┃     1     ┃     2     ┃     3     ┃     *     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃    DEL    ┃     0     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
       &none           &none                 &kp UP_ARROW             &none                         &none    &kp PAGE_UP    &kp LG(SEMICOLON)  &kp UP_ARROW    &kp LG(APOSTROPHE)  &kp INSERT
       &kp LEFT_SHIFT  &mt LCTRL LEFT_ARROW  &mt LEFT_ALT DOWN_ARROW  &mt LEFT_COMMAND RIGHT_ARROW  &none    &kp HOME       &kp LEFT_ARROW     &kp DOWN_ARROW  &kp RIGHT_ARROW     &kp END
&none  &none           &none                 &none                    &none                         &none    &kp PAGE_DOWN  &none              &none           &none               &none       &none
                                             &to 0                    &none                         &none    &kp F13        &kp F14            &kp F15
            >;
        };

        mouse_layer {
            bindings = <
       &none  &none  &none      &none      &none    &none      &none      &none  &none  &none
       &none  &none  &mkp RCLK  &mkp LCLK  &none    &none      &none      &none  &none  &none
&none  &none  &none  &none      &none      &none    &none      &none      &none  &none  &none  &none
                     &to 0      &none      &none    &mkp RCLK  &mkp LCLK  &none
            >;

            label = "MOUSE";
        };

        hyper_left_layer {
            bindings = <
                               &kp LS(LA(LC(LG(Q))))  &kp LS(LA(LC(LG(W))))  &kp LS(LA(LC(LG(F))))  &kp LS(LA(LC(LG(P))))  &kp LS(LA(LC(LG(B))))    &none  &kp DELETE      &kp UP_ARROW    &none            &none
                               &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(T))))  &kp LS(LA(LC(LG(G))))    &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none
&kp LS(LA(LC(LG(SEMICOLON))))  &kp LS(LA(LC(LG(Z))))  &kp LS(LC(LA(LG(X))))  &kp LS(LA(LC(LG(C))))  &kp LS(LA(LC(LG(D))))  &kp LS(LA(LC(LG(V))))    &none  &none           &none           &none            &none  &none
                                                                             &kp F16                &kp F17                &kp F18                  &none  &none           &none
            >;

            label = "LHYPER";
        };

        hyper_right_layer {
            label = "RHYPER";
            bindings = <
       &none  &kp C_VOLUME_DOWN     &kp C_MUTE        &kp C_VOLUME_UP       &none    &kp LS(LA(LC(LG(J))))  &kp LS(LA(LC(LG(L))))  &kp LS(LA(LC(LG(U))))      &kp LS(LA(LC(LG(Y))))    &kp LS(LC(LA(LG(BSLH))))
       &none  &kp C_PREVIOUS        &kp C_PLAY_PAUSE  &kp C_NEXT            &none    &kp LS(LA(LC(LG(M))))  &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(E))))      &kp LS(LA(LC(LG(I))))    &kp LS(LA(LC(LG(O))))
&none  &none  &kp C_BRIGHTNESS_DEC  &none             &kp C_BRIGHTNESS_INC  &none    &kp LS(LA(LC(LG(K))))  &kp LS(LA(LC(LG(H))))  &kp LS(LA(LG(LC(COMMA))))  &kp LS(LA(LG(LC(DOT))))  &kp LS(LA(LC(LG(FSLH))))  &kp LS(LA(LC(LG(SEMI))))
                                    &none             &none                 &none    &kp F19                &kp F20                &kp F21
            >;
        };

        function_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "FUN";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃   RESET   ┃ BT CLEAR  ┃  OUT TOG  ┃           ┃           ┃   ┃           ┃    F7     ┃    F8     ┃    F9     ┃    F12    ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ BOOTLOAD  ┃ BT NEXT   ┃           ┃           ┃           ┃   ┃           ┃    F4     ┃    F5     ┃    F6     ┃    F11    ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃ BT PREV   ┃           ┃           ┃           ┃   ┃           ┃    F1     ┃    F2     ┃    F3     ┃    F10    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &none   &out OUT_USB  &out OUT_TOG  &out OUT_BLE  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12
            &none   &bt BT_PRV    &bt BT_SEL 0  &bt BT_NXT    &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_CLR  &trans  &none         &trans        &trans        &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                  &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };
};
