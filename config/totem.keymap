//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <16 27>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_asterisk {
            bindings = <&kp LS(SQT)>;
            key-positions = <7 17>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_slash {
            bindings = <&kp LS(SLASH)>;
            key-positions = <17 28>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_ampersand {
            bindings = <&kp LS(NUMBER_6)>;
            key-positions = <8 18>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_pipe {
            bindings = <&kp LA(NUMBER_6)>;
            key-positions = <18 29>;
            layers = <0 1>;
            require-prior-idle-ms = <100>;
        };

        combo_left_parenthesis {
            bindings = <&kp LS(N8)>;
            key-positions = <16 17>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_right_parenthesis {
            bindings = <&kp LS(N9)>;
            key-positions = <17 18>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_left_bracket {
            bindings = <&kp RA(N8)>;
            key-positions = <6 7>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_right_bracket {
            bindings = <&kp RA(N9)>;
            key-positions = <7 8>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_left_brace {
            bindings = <&kp RS(RA(N8))>;
            key-positions = <27 28>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_right_brace {
            bindings = <&kp RS(RA(N9))>;
            key-positions = <28 29>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_equal {
            bindings = <&kp LS(N0)>;
            key-positions = <19 18>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_caret {
            bindings = <&kp LS(RIGHT_BRACKET)>;
            key-positions = <5 15>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_underscore {
            bindings = <&kp LS(MINUS)>;
            key-positions = <15 26>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_at_sign {
            bindings = <&kp RA(NUMBER_2)>;
            key-positions = <1 11>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_percent {
            bindings = <&kp LS(N5)>;
            key-positions = <11 22>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_hash {
            bindings = <&kp LS(NUMBER_3)>;
            key-positions = <2 12>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_backslash {
            bindings = <&kp RS(RA(N7))>;
            key-positions = <12 23>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_dollar_sign {
            bindings = <&kp RA(NUMBER_4)>;
            key-positions = <3 13>;
        };

        combo_euro_sign {
            bindings = <&kp RS(NUMBER_4)>;
            key-positions = <13 24>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_tab_back {
            bindings = <&kp RS(TAB)>;
            key-positions = <11 12>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <22 23>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        combo_greater_than {
            bindings = <&kp RS(LESS_THAN)>;
            key-positions = <23 24>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
               &kp Q        &kp W       &kp F               &kp P        &kp B           &kp J           &kp L        &kp U                &kp Y       &kp BACKSLASH
               &mt LCTRL A  &mt LALT R  &mt LEFT_COMMAND S  &mt LSHFT T  &kp G           &kp M           &mt RSHFT N  &mt RIGHT_COMMAND E  &mt RALT I  &mt RCTRL O
&kp SEMICOLON  &kp Z        &kp X       &kp C               &kp D        &kp V           &kp K           &kp H        &kp COMMA            &kp DOT     &kp QUESTION   &kp APOSTROPHE
                                        &lt 1 BACKSPACE     &lt 2 SPACE  &lt 3 ESCAPE    &sk LEFT_SHIFT  &lt 4 RET    &lt 5 DELETE
            >;
        };

        number_layer {
            bindings = <
       &none  &none  &none  &none  &none    &none  &kp N7  &kp N8  &kp N9  &none
       &none  &none  &none  &none  &none    &none  &kp N4  &kp N5  &kp N6  &kp N0
&none  &none  &none  &none  &none  &none    &none  &kp N1  &kp N2  &kp N3  &none   &none
                     &none  &none  &none    &none  &none   &mo 6
            >;

            label = "NUM";
        };

        nav_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "NAVI";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃           ┃           ┃     UP    ┃           ┃     {     ┃   ┃     }     ┃     7     ┃     8     ┃     9     ┃     +     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   SHIFT   ┃   LEFT    ┃    DOWN   ┃   RIGHT   ┃     [     ┃   ┃     ]     ┃     4     ┃     5     ┃     6     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃   P UP    ┃  C LOCK   ┃  P DOWN   ┃     (     ┃   ┃     )     ┃     1     ┃     2     ┃     3     ┃     *     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃    DEL    ┃     0     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &none       &none                    &kp UP_ARROW                 &none                  &kp PAGE_UP      &kp PAGE_UP    &kp INSERT      &kp UP_ARROW    &kp HOME         &kp END
            &kp LCTRL   &mt LEFT_ALT LEFT_ARROW  &mt LEFT_COMMAND DOWN_ARROW  &mt LCTRL RIGHT_ARROW  &none            &kp TAB        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none
&kp K_REDO  &kp K_UNDO  &kp K_CUT                &kp K_COPY                   &kp K_PASTE            &kp PAGE_DOWN    &kp PAGE_DOWN  &kp K_PASTE     &kp K_COPY      &kp K_CUT        &kp K_UNDO  &kp K_REDO
                                                 &none                        &none                  &none            &kp K_BACK     &kp F13         &kp K_FORWARD
            >;
        };

        mouse_layer {
            bindings = <
       &none      &none     &none             &none           &none    &none  &none      &none      &none  &none
       &kp LCTRL  &kp LALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &none    &none  &none      &none      &none  &none
&none  &none      &none     &none             &none           &none    &none  &none      &none      &none  &none  &none
                            &none             &none           &none    &none  &mkp LCLK  &mkp RCLK
            >;

            label = "MOUSE";
        };

        hyper_layer {
            bindings = <
                               &kp LS(LA(LC(LG(Q))))        &kp LS(LA(LC(LG(W))))           &kp LS(LA(LC(LG(F))))               &kp LS(LA(LC(LG(P))))             &kp LS(LA(LC(LG(B))))    &none  &none                 &kp UP_ARROW         &none                 &none
                               &mt LCTRL LS(LA(LC(LG(A))))  &mt LEFT_ALT LS(LA(LC(LG(R))))  &mt LEFT_COMMAND LS(LA(LC(LG(S))))  &mt LEFT_SHIFT LS(LA(LC(LG(T))))  &kp LS(LA(LC(LG(G))))    &none  &mt LSHFT LEFT_ARROW  &mt LGUI DOWN_ARROW  &mt LALT RIGHT_ARROW  &kp LCTRL
&kp LS(LA(LC(LG(SEMICOLON))))  &kp LS(LA(LC(LG(Z))))        &kp LS(LC(LA(LG(X))))           &kp LS(LA(LC(LG(C))))               &kp LS(LA(LC(LG(D))))             &kp LS(LA(LC(LG(V))))    &none  &none                 &kp COMMA            &kp DOT               &kp FSLH   &none
                                                                                            &kp F16                             &kp F17                           &kp F18                  &none  &none                 &none
            >;

            label = "HYPER";
        };

        meh_layer {
            label = "MEH";
            bindings = <
                           &kp LA(LC(LG(Q)))        &kp LA(LC(LG(W)))           &kp LA(LC(LG(F)))               &kp LA(LC(LG(P)))             &kp LA(LC(LG(B)))    &none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_BACKLIGHT_TOGGLE  &none
                           &mt LCTRL LA(LC(LG(A)))  &mt LEFT_ALT LA(LC(LG(R)))  &mt LEFT_COMMAND LA(LC(LG(S)))  &mt LEFT_SHIFT LA(LC(LG(T)))  &kp LA(LC(LG(G)))    &none  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp K_MUTE              &none
&kp LA(LC(LG(SEMICOLON)))  &kp LA(LC(LG(Z)))        &kp LC(LA(LG(X)))           &kp LA(LC(LG(C)))               &kp LA(LC(LG(D)))             &kp LA(LC(LG(V)))    &none  &kp C_PREV            &kp C_NEXT            &kp C_PLAY_PAUSE        &none  &none
                                                                                &kp F19                         &kp F20                       &kp F21              &none  &none                 &none
            >;
        };

        function_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "FUN";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃   RESET   ┃ BT CLEAR  ┃  OUT TOG  ┃           ┃           ┃   ┃           ┃    F7     ┃    F8     ┃    F9     ┃    F12    ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ BOOTLOAD  ┃ BT NEXT   ┃           ┃           ┃           ┃   ┃           ┃    F4     ┃    F5     ┃    F6     ┃    F11    ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃ BT PREV   ┃           ┃           ┃           ┃   ┃           ┃    F1     ┃    F2     ┃    F3     ┃    F10    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
        &none   &bt BT_CLR  &out OUT_TOG  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12
        &none   &bt BT_NXT  &trans        &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &bt BT_PRV  &trans        &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                            &trans        &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
